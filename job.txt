c++ 右值引用 https://www.cnblogs.com/likaiming/p/9029908.html
g++ -fno-elide-constructors
算法复杂度  http://c.biancheng.net/view/6636.html

算法笔试
1. 迷宫问题 https://leetcode-cn.com/problems/minimum-path-sum/
  解法: https://blog.csdn.net/ProLayman/article/details/96325387
    
C++单例的实现
https://www.debugger.wiki/article/html/1550331735191819
 基础要点
    1. 全局只有一个实例：static 特性，同时禁止用户自己声明并定义实例（把构造函数设为 private）
    2. 线程安全
    3. 禁止赋值和拷贝
    4. 用户通过接口获取实例：使用 static 类成员函数

c++ 11
= 0 means that a function is pure virtual and you cannot instantiate an object from this class. You need to derive from it and implement this method
= delete means that the compiler will not generate those constructors for you. AFAIK this is only allowed on copy constructor and assignment operator. But I am not too good at the upcoming standard.
虚析构函数:
  有时会让一个基类指针指向用 new 运算符动态生成的派生类对象；同时，用 new 运算符动态生成的对象都是通过 delete 指向它的指针来释放的。如果一个基类指针指向用 new 运算符动态生成的派生类对象，而释放该对象时是通过释放该基类指针来完成的，就可能导致程序不正确。

tcpdump
https://blog.csdn.net/LL845876425/article/details/105061376
https://blog.csdn.net/u011700281/article/details/52572952
https://blog.csdn.net/aflyeaglenku/article/details/53114437
tcp header  offset在第12字节，表示tcp头长度（最小20，最大15 * 4 = 60）,占4bit，每bit单位为4，计算方法(tcp[12:1] & 0xf0) >> 2

tcp
https://segmentfault.com/a/1190000023565467

稳定排序和不稳定排序
https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html
  首先，排序算法的稳定性大家应该都知道，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj，Ai原来在位置前，排序后Ai还是要在Aj位置前。

  其次，说一下稳定性的好处。排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，对基于比较的排序算法而言，元素交换的次数可能会少一些（个人感觉，没有证实）

二分搜索树
前序遍历：一般打印使用前序遍历
中序遍历：从小到达排序打印使用中序遍历
后续遍历：先让每个节点的左右子树都遍历完成，再开始做自己的事情，应用在释放二叉树
https://www.cnblogs.com/WindSun/p/10895787.html




python

    Numbers（数字） => 不可变数据类型
    String（字符串）=> 不可变数据类型
    List（列表）
    Tuple（元组）=> 不可变数据类型
    Dictionary（字典）

Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)

c内存分配
https://www.cnblogs.com/Ninac/archive/2013/04/23/3039023.html

编译指令
#pragma pack(1)
gdb
save breakpoints filename
source filename
set scheduler-locking on


mysql
https://blog.csdn.net/u010960184/article/details/82557978

c++ lambda
https://www.cnblogs.com/yaya12138/p/11815475.html
[捕获列表](参数列表)->返回类型{函数体}
[](int a, int b)->int{
    return a + b;
};


布隆过滤器
https://zhuanlan.zhihu.com/p/72378274
